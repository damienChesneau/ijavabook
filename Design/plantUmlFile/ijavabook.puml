@startuml
package fr.upem.ijavabook{
    Interface Runnable{
        +run()
    }
    Interface AutoCloseable{
        +close()
    }

    class AbstractVerticle

    package exmanager{
        interface ExerciseService{
            +playExercise(Path):String
            +closeExercise(Path)
            +getAllBysDirectory():Path[*]
            +getFilesNamesWithoutExtension():String[*]
        }

        class EncapsulatePlayingData{
            - EncapsulatePlayingData(String)
        }
        enum PatternParser

        class ExerciseImpl implements ExerciseService{
            ~ ExerciseImpl(Path,EventBusSender)
            ~ startWatcher()
        }
        class Exercises{
            -Exercises()
            {static} + getExerciseSrv(Path,EventBusSender) : ExerciseService
        }
        class Parser{
            ~ Parser(Path)
            + parseMarkdown(String):String
        }
        class Watcher implements Runnable{
            ~Watcher(Path)
        }
        ExerciseImpl-->"*"EncapsulatePlayingData
        Parser ..->PatternParser
    }

    package jinterpret{
        class InterpretedLine{
            ~InterpretedLine(String,String)
            +getException():String
            +getValue():String
        }
        interface Interpreter extends AutoCloseable{
            +interpret(String):InterpretedLine
            +getOutput():String[*]
            +getErrors:String[*]
            +test(String):JunitTestResult
        }
        class JShellInterpreter implements Interpreter{
            ~JShellInterpreter(Path,Path,PrintStream,PrintStream,JShell)
        }
        class Interpreters{
            - Interpreters
            {static}+getJavaInterpreter():Interpreter
        }
        enum JunitTestResult
    }

    package server{

        interface EventWithExercise{
            +doAction(RoutingContext,ExerciseService)
        }
        class EventBusSender{
            ~EventBusSender(EventBus)
            +send(Path,String)
        }
        enum ContentTypeVal{
            ~getContent():String
        }
        enum RequestType{
           ~getRoute(Router,String):Route
           ~getRequestTypeApplication(Router,String):Route
        }
        class Route{
            ~Route(String,EventWithExercise,RequestType)
            ~getEvent():EventWithExercise
            ~getRequestType():RequestType
            ~getRoute():String

        }


        class RouteManager extends AbstractVerticle{
            ~RouteManager(Route[*],Path)
            +start()
        }

        interface Server{
            +start():String
            +stop()
        }
        class ServerImpl implements Server{
            ~ServerImpl(Path)
        }

        class Servers{
            -Servers()
            {static}+getServer(Path):Server
        }
        package manageclients{
            class Client implements Interpreter
            class ClientsManager{
                +newClient():int
                +getClientByToken(int):Client
                +rmClient(int)

            }

            Client-->Interpreter
            ClientsManager-->"*"Client
        }

        package transacparser{
            class BuilderJavaInterpreted<T>{
                -BuilderJavaInterpreted(TransactionPattern,String)
                +setInterpretedLine(InterpretedLine):BuilderJavaInterpreted<T>
                +build():TransactionParser<JsonArray>
            }

            class BuilderJavaList{
                -BuilderJavaList(TransactionPattern)
                +setStringList(String[*]):BuilderJavaList
                +build():TransactionParser<JsonArray>
            }

            class TransactionParser<T>{
                +TransactionParser(TransactionPattern,T)
                +getMessage():T
                +getType():TransactionPattern
                +toJson():String
                {static}+parseTransactionParserWithMessageArray(String):TransactionParser<String[*]>
                {static}+parseAsArray(String):TransactionParser<String>[*]
                {static}+builderJavaInterpreted(TransactionPattern,String[*]):BuilderJavaInterpreted<T>
                {static}+builderJavaList(TransactionPattern):BuilderJavaList
            }
            enum TransactionPattern{
                {static}+getByTranslation(String):TransactionPattern
            }
        }


        RouteManager-->"*"Route
        ExerciseImpl-->"1"EventBusSender
        ServerImpl->"1"ClientsManager
    }
}

@enduml